/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedAgentRouteRouteImport } from './routes/_authed/agent/route'
import { Route as AuthedUsersUserIdRouteImport } from './routes/_authed/users.$userId'
import { Route as AuthedAgentChatsIndexRouteImport } from './routes/_authed/agent/chats.index'
import { Route as AuthedAgentChatsChatSessionIdRouteImport } from './routes/_authed/agent/chats.$chatSessionId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedAgentRouteRoute = AuthedAgentRouteRouteImport.update({
  id: '/agent',
  path: '/agent',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedUsersUserIdRoute = AuthedUsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedAgentChatsIndexRoute = AuthedAgentChatsIndexRouteImport.update({
  id: '/chats/',
  path: '/chats/',
  getParentRoute: () => AuthedAgentRouteRoute,
} as any)
const AuthedAgentChatsChatSessionIdRoute =
  AuthedAgentChatsChatSessionIdRouteImport.update({
    id: '/chats/$chatSessionId',
    path: '/chats/$chatSessionId',
    getParentRoute: () => AuthedAgentRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/agent': typeof AuthedAgentRouteRouteWithChildren
  '/users/$userId': typeof AuthedUsersUserIdRoute
  '/agent/chats/$chatSessionId': typeof AuthedAgentChatsChatSessionIdRoute
  '/agent/chats': typeof AuthedAgentChatsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/agent': typeof AuthedAgentRouteRouteWithChildren
  '/users/$userId': typeof AuthedUsersUserIdRoute
  '/agent/chats/$chatSessionId': typeof AuthedAgentChatsChatSessionIdRoute
  '/agent/chats': typeof AuthedAgentChatsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/_authed/agent': typeof AuthedAgentRouteRouteWithChildren
  '/_authed/users/$userId': typeof AuthedUsersUserIdRoute
  '/_authed/agent/chats/$chatSessionId': typeof AuthedAgentChatsChatSessionIdRoute
  '/_authed/agent/chats/': typeof AuthedAgentChatsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/signin'
    | '/signup'
    | '/agent'
    | '/users/$userId'
    | '/agent/chats/$chatSessionId'
    | '/agent/chats'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/signin'
    | '/signup'
    | '/agent'
    | '/users/$userId'
    | '/agent/chats/$chatSessionId'
    | '/agent/chats'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/signin'
    | '/signup'
    | '/_authed/agent'
    | '/_authed/users/$userId'
    | '/_authed/agent/chats/$chatSessionId'
    | '/_authed/agent/chats/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/agent': {
      id: '/_authed/agent'
      path: '/agent'
      fullPath: '/agent'
      preLoaderRoute: typeof AuthedAgentRouteRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/users/$userId': {
      id: '/_authed/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthedUsersUserIdRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/agent/chats/': {
      id: '/_authed/agent/chats/'
      path: '/chats'
      fullPath: '/agent/chats'
      preLoaderRoute: typeof AuthedAgentChatsIndexRouteImport
      parentRoute: typeof AuthedAgentRouteRoute
    }
    '/_authed/agent/chats/$chatSessionId': {
      id: '/_authed/agent/chats/$chatSessionId'
      path: '/chats/$chatSessionId'
      fullPath: '/agent/chats/$chatSessionId'
      preLoaderRoute: typeof AuthedAgentChatsChatSessionIdRouteImport
      parentRoute: typeof AuthedAgentRouteRoute
    }
  }
}

interface AuthedAgentRouteRouteChildren {
  AuthedAgentChatsChatSessionIdRoute: typeof AuthedAgentChatsChatSessionIdRoute
  AuthedAgentChatsIndexRoute: typeof AuthedAgentChatsIndexRoute
}

const AuthedAgentRouteRouteChildren: AuthedAgentRouteRouteChildren = {
  AuthedAgentChatsChatSessionIdRoute: AuthedAgentChatsChatSessionIdRoute,
  AuthedAgentChatsIndexRoute: AuthedAgentChatsIndexRoute,
}

const AuthedAgentRouteRouteWithChildren =
  AuthedAgentRouteRoute._addFileChildren(AuthedAgentRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedAgentRouteRoute: typeof AuthedAgentRouteRouteWithChildren
  AuthedUsersUserIdRoute: typeof AuthedUsersUserIdRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedAgentRouteRoute: AuthedAgentRouteRouteWithChildren,
  AuthedUsersUserIdRoute: AuthedUsersUserIdRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
